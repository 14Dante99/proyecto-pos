/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AuthenticatedImport } from './routes/_authenticated'
import { Route as AuthImport } from './routes/_auth'
import { Route as AuthenticatedProductsImport } from './routes/_authenticated/products'

// Create Virtual Routes

const AuthenticatedIndexLazyImport = createFileRoute('/_authenticated/')()
const AuthenticatedSettingsLazyImport = createFileRoute(
  '/_authenticated/settings',
)()
const AuthSignUpLazyImport = createFileRoute('/_auth/sign-up')()
const AuthSignInLazyImport = createFileRoute('/_auth/sign-in')()
const AuthenticatedProductsIndexLazyImport = createFileRoute(
  '/_authenticated/products/',
)()
const AuthenticatedProductsAddLazyImport = createFileRoute(
  '/_authenticated/products/add',
)()
const AuthenticatedProductsIdLazyImport = createFileRoute(
  '/_authenticated/products/$id',
)()

// Create/Update Routes

const AuthenticatedRoute = AuthenticatedImport.update({
  id: '/_authenticated',
  getParentRoute: () => rootRoute,
} as any)

const AuthRoute = AuthImport.update({
  id: '/_auth',
  getParentRoute: () => rootRoute,
} as any)

const AuthenticatedIndexLazyRoute = AuthenticatedIndexLazyImport.update({
  path: '/',
  getParentRoute: () => AuthenticatedRoute,
} as any).lazy(() =>
  import('./routes/_authenticated/index.lazy').then((d) => d.Route),
)

const AuthenticatedSettingsLazyRoute = AuthenticatedSettingsLazyImport.update({
  path: '/settings',
  getParentRoute: () => AuthenticatedRoute,
} as any).lazy(() =>
  import('./routes/_authenticated/settings.lazy').then((d) => d.Route),
)

const AuthSignUpLazyRoute = AuthSignUpLazyImport.update({
  path: '/sign-up',
  getParentRoute: () => AuthRoute,
} as any).lazy(() => import('./routes/_auth/sign-up.lazy').then((d) => d.Route))

const AuthSignInLazyRoute = AuthSignInLazyImport.update({
  path: '/sign-in',
  getParentRoute: () => AuthRoute,
} as any).lazy(() => import('./routes/_auth/sign-in.lazy').then((d) => d.Route))

const AuthenticatedProductsRoute = AuthenticatedProductsImport.update({
  path: '/products',
  getParentRoute: () => AuthenticatedRoute,
} as any)

const AuthenticatedProductsIndexLazyRoute =
  AuthenticatedProductsIndexLazyImport.update({
    path: '/',
    getParentRoute: () => AuthenticatedProductsRoute,
  } as any).lazy(() =>
    import('./routes/_authenticated/products.index.lazy').then((d) => d.Route),
  )

const AuthenticatedProductsAddLazyRoute =
  AuthenticatedProductsAddLazyImport.update({
    path: '/add',
    getParentRoute: () => AuthenticatedProductsRoute,
  } as any).lazy(() =>
    import('./routes/_authenticated/products.add.lazy').then((d) => d.Route),
  )

const AuthenticatedProductsIdLazyRoute =
  AuthenticatedProductsIdLazyImport.update({
    path: '/$id',
    getParentRoute: () => AuthenticatedProductsRoute,
  } as any).lazy(() =>
    import('./routes/_authenticated/products.$id.lazy').then((d) => d.Route),
  )

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthImport
      parentRoute: typeof rootRoute
    }
    '/_authenticated': {
      id: '/_authenticated'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthenticatedImport
      parentRoute: typeof rootRoute
    }
    '/_authenticated/products': {
      id: '/_authenticated/products'
      path: '/products'
      fullPath: '/products'
      preLoaderRoute: typeof AuthenticatedProductsImport
      parentRoute: typeof AuthenticatedImport
    }
    '/_auth/sign-in': {
      id: '/_auth/sign-in'
      path: '/sign-in'
      fullPath: '/sign-in'
      preLoaderRoute: typeof AuthSignInLazyImport
      parentRoute: typeof AuthImport
    }
    '/_auth/sign-up': {
      id: '/_auth/sign-up'
      path: '/sign-up'
      fullPath: '/sign-up'
      preLoaderRoute: typeof AuthSignUpLazyImport
      parentRoute: typeof AuthImport
    }
    '/_authenticated/settings': {
      id: '/_authenticated/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof AuthenticatedSettingsLazyImport
      parentRoute: typeof AuthenticatedImport
    }
    '/_authenticated/': {
      id: '/_authenticated/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AuthenticatedIndexLazyImport
      parentRoute: typeof AuthenticatedImport
    }
    '/_authenticated/products/$id': {
      id: '/_authenticated/products/$id'
      path: '/$id'
      fullPath: '/products/$id'
      preLoaderRoute: typeof AuthenticatedProductsIdLazyImport
      parentRoute: typeof AuthenticatedProductsImport
    }
    '/_authenticated/products/add': {
      id: '/_authenticated/products/add'
      path: '/add'
      fullPath: '/products/add'
      preLoaderRoute: typeof AuthenticatedProductsAddLazyImport
      parentRoute: typeof AuthenticatedProductsImport
    }
    '/_authenticated/products/': {
      id: '/_authenticated/products/'
      path: '/'
      fullPath: '/products/'
      preLoaderRoute: typeof AuthenticatedProductsIndexLazyImport
      parentRoute: typeof AuthenticatedProductsImport
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren({
  AuthRoute: AuthRoute.addChildren({
    AuthSignInLazyRoute,
    AuthSignUpLazyRoute,
  }),
  AuthenticatedRoute: AuthenticatedRoute.addChildren({
    AuthenticatedProductsRoute: AuthenticatedProductsRoute.addChildren({
      AuthenticatedProductsIdLazyRoute,
      AuthenticatedProductsAddLazyRoute,
      AuthenticatedProductsIndexLazyRoute,
    }),
    AuthenticatedSettingsLazyRoute,
    AuthenticatedIndexLazyRoute,
  }),
})

/* prettier-ignore-end */
